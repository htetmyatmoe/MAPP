{
    "Target": {
        "core": null,
        "trustzone": false,
        "default_toolchain": "ARM",
        "supported_toolchains": null,
        "extra_labels": [],
        "supported_form_factors": [],
        "components": [],
        "is_disk_virtual": false,
        "macros": [],
        "device_has": [],
        "features": [],
        "detect_code": [],
        "public": false,
        "c_lib": "std",
        "bootloader_supported": false,
        "static_memory_defines": true,
        "printf_lib": "minimal-printf",
        "supported_c_libs": {
            "arm": [
                "std"
            ],
            "gcc_arm": [
                "std",
                "small"
            ],
            "iar": [
                "std"
            ]
        },
        "supported_application_profiles": [
            "full"
        ],
        "config": {
            "console-uart": {
                "help": "Target has UART console on pins CONSOLE_TX, CONSOLE_RX. Value is only significant if target has SERIAL device.",
                "value": true
            },
            "console-uart-flow-control": {
                "help": "Console hardware flow control. Options: null, RTS, CTS, RTSCTS.",
                "value": null
            },
            "network-default-interface-type": {
                "help": "Default network interface type. Typical options: null, ETHERNET, WIFI, CELLULAR, MESH",
                "value": null
            },
            "deep-sleep-latency": {
                "help": "Time in ms required to go to and wake up from deep sleep (max 10)",
                "value": 0
            },
            "app_offset": {
                "help": "Application start offset in ROM",
                "value": null
            },
            "header_offset": {
                "help": "Application header offset in ROM",
                "value": null
            },
            "boot-stack-size": {
                "help": "Define the boot stack size in bytes. This value must be a multiple of 8",
                "value": "0x1000"
            },
            "mpu-rom-end": {
                "help": "Last address of ROM protected by the MPU",
                "value": "0x0fffffff"
            },
            "default-form-factor": {
                "help": "Default form factor of this board taken from supported_form_factors. This must be a lowercase string such as 'arduino'",
                "value": null
            },
            "tickless-from-us-ticker": {
                "help": "Run tickless from the microsecond ticker rather than the low power ticker. Running tickless off of the microsecond ticker improves interrupt latency on targets which use lpticker_delay_ticks",
                "value": false
            },
            "init-us-ticker-at-boot": {
                "help": "Initialize the microsecond ticker at boot rather than on first use, and leave it initialized. This speeds up wait_us in particular.",
                "value": false
            },
            "custom-tickers": {
                "help": "Support custom tickers in addition to USTICKER and LPTICKER. Turning this off can permit some space and speed optimisations, if characteristics of USTICKER and LPTICKER are known at compile time.",
                "value": true
            },
            "xip-enable": {
                "help": "Enable Execute In Place (XIP) on this target. Value is only significant if the board has executable external storage such as QSPIF. If this is enabled, customize the linker file to choose what text segments are placed on external storage",
                "value": false
            },
            "default-adc-vref": {
                "help": "Default reference voltage for ADC (float)",
                "value": "NAN"
            },
            "internal-flash-uniform-sectors": {
                "help": "Target's internal flash has uniform sector sizes",
                "value": true
            }
        }
    },
    "MCU_STM32": {
        "inherits": [
            "Target"
        ],
        "public": false,
        "extra_labels": [
            "STM"
        ],
        "supported_toolchains": [
            "ARM",
            "IAR",
            "GCC_ARM"
        ],
        "supported_c_libs": {
            "arm": [
                "std",
                "small"
            ],
            "gcc_arm": [
                "std",
                "small"
            ],
            "iar": [
                "std"
            ]
        },
        "supported_application_profiles": [
            "full",
            "bare-metal"
        ],
        "macros": [
            "USE_HAL_DRIVER",
            "USE_FULL_LL_DRIVER",
            "TRANSACTION_QUEUE_SIZE_SPI=2"
        ],
        "bootloader_supported": true,
        "config": {
            "lse_available": {
                "help": "Define if a Low Speed External xtal (LSE) is available on the board (0 = No, 1 = Yes). If Yes, the LSE will be used to clock the RTC, LPUART, ... otherwise the Low Speed Internal clock (LSI) will be used",
                "value": "1"
            },
            "rtc_clock_source": {
                "help": "Define the RTC clock source. USE_RTC_CLK_LSE_OR_LSI, USE_RTC_CLK_LSI, USE_RTC_CLK_HSE. LPTICKER is not available for HSE and should be removed from the target configuration.",
                "value": "USE_RTC_CLK_LSE_OR_LSI"
            },
            "lpuart_clock_source": {
                "help": "Define the LPUART clock source. Mask values: USE_LPUART_CLK_LSE, USE_LPUART_CLK_PCLK1, USE_LPUART_CLK_HSI",
                "value": "USE_LPUART_CLK_LSE|USE_LPUART_CLK_PCLK1|USE_LPUART_CLK_PCLK3"
            },
            "stdio_uart_tx": {
                "help": "default TX STDIO pins is defined in PinNames.h file, but it can be overridden"
            },
            "stdio_uart_rx": {
                "help": "default RX STDIO pins is defined in PinNames.h file, but it can be overridden"
            },
            "lpticker_delay_ticks": {
                "help": "https://os.mbed.com/docs/latest/porting/low-power-ticker.html",
                "value": 1,
                "macro_name": "LPTICKER_DELAY_TICKS"
            },
            "lpticker_lptim_clock": {
                "help": "Default value for LPTIM clock (lpticker_lptim == 1). Value is the dividing factor. Choose 1, 2, 4, 8, 16, 32, 64 or 128",
                "value": 1,
                "constraint": "Disclaimers : values from 8 to 128 have impacts on mbed-os timer precision and therefore on scheduling. It's not supported by mbed-os. Use it if you know what you're doing such as long low power sleep."
            },
            "gpio_reset_at_init": {
                "help": "if value set, all GPIO are reset during init",
                "value": false
            }
        },
        "overrides": {
            "deep-sleep-latency": 4,
            "init-us-ticker-at-boot": true
        },
        "device_has": [
            "USTICKER",
            "LPTICKER",
            "RTC",
            "ANALOGIN",
            "I2C",
            "I2CSLAVE",
            "I2C_ASYNCH",
            "INTERRUPTIN",
            "PORTIN",
            "PORTINOUT",
            "PORTOUT",
            "PWMOUT",
            "SERIAL",
            "SERIAL_FC",
            "SLEEP",
            "SPI",
            "SPISLAVE",
            "SPI_ASYNCH",
            "STDIO_MESSAGES",
            "WATCHDOG",
            "RESET_REASON"
        ]
    },
    "MCU_STM32F1": {
        "inherits": [
            "MCU_STM32"
        ],
        "public": false,
        "c_lib": "small",
        "core": "Cortex-M3",
        "extra_labels_add": [
            "STM32F1"
        ],
        "config": {
            "clock_source": {
                "help": "Mask value : USE_PLL_HSE_EXTC | USE_PLL_HSE_XTAL | USE_PLL_HSI",
                "value": "USE_PLL_HSE_EXTC|USE_PLL_HSE_XTAL|USE_PLL_HSI",
                "macro_name": "CLOCK_SOURCE"
            }
        },
        "device_has_add": [
            "CAN",
            "SERIAL_ASYNCH",
            "FLASH"
        ],
        "device_has_remove": [
            "LPTICKER"
        ]
    },
    "MCU_STM32F103xB": {
        "inherits": [
            "MCU_STM32F1"
        ],
        "public": false,
        "extra_labels_add": [
            "STM32F103xB"
        ],
        "macros_add": [
            "STM32F103xB"
        ]
    },
    "NUCLEO_F103RB": {
        "inherits": [
            "MCU_STM32F103xB"
        ],
        "supported_form_factors": [
            "ARDUINO_UNO"
        ],
        "detect_code": [
            "0700"
        ],
        "device_name": "STM32F103RB"
    }
}
